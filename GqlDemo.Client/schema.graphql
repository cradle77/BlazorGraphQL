schema {
  query: SharesQuery
  mutation: ShareMutation
  subscription: SharesSubscription
}

type SharesQuery {
  industries: [Industry]
  shares(industryId: Int "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ShareFilterInput order: [ShareSortInput!]): SharesConnection
}

type ShareMutation {
  changeValue(input: ChangeValueInput): ChangeValuePayload
}

type SharesSubscription {
  onShareValueChanged: Share
  onShareValueChangedByIndustry(industry: String): Share
}

input ShareFilterInput {
  and: [ShareFilterInput!]
  or: [ShareFilterInput!]
  id: IntOperationFilterInput
  companyName: StringOperationFilterInput
  value: DecimalOperationFilterInput
  industry: IndustryFilterInput
}

input ShareSortInput {
  id: SortEnumType
  companyName: SortEnumType
  value: SortEnumType
  industry: IndustrySortInput
}

"A connection to a list of items."
type SharesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SharesEdge!]
  "A flattened list of the nodes."
  nodes: [Share]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input DecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input IndustryFilterInput {
  and: [IndustryFilterInput!]
  or: [IndustryFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
}

enum SortEnumType {
  ASC
  DESC
}

input IndustrySortInput {
  id: SortEnumType
  name: SortEnumType
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Share {
  id: Int!
  companyName: String
  value: Decimal!
  industry: Industry
}

"An edge in a connection."
type SharesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Share
}

"The built-in `Decimal` scalar type."
scalar Decimal

type ChangeValuePayload {
  share: Share
}

type Industry {
  id: Int!
  name: String
}

input ChangeValueInput {
  id: Int!
  percentage: Int!
}