schema {
  query: SharesQuery
}

type SharesQuery {
  industries: [Industry]
  shares(first: Int after: String last: Int before: String where: ShareFilterInput order: [ShareSortInput!]): ShareConnection
}

input ShareFilterInput {
  and: [ShareFilterInput!]
  or: [ShareFilterInput!]
  id: ComparableInt32OperationFilterInput
  companyName: StringOperationFilterInput
  value: ComparableDecimalOperationFilterInput
  industry: IndustryFilterInput
}

input ShareSortInput {
  id: SortEnumType
  companyName: SortEnumType
  value: SortEnumType
  industry: IndustrySortInput
}

"A connection to a list of items."
type ShareConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ShareEdge!]
  "A flattened list of the nodes."
  nodes: [Share]
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ComparableDecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal!]
  nin: [Decimal!]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input IndustryFilterInput {
  and: [IndustryFilterInput!]
  or: [IndustryFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
}

enum SortEnumType {
  ASC
  DESC
}

input IndustrySortInput {
  id: SortEnumType
  name: SortEnumType
}

type Share {
  id: Int!
  companyName: String
  value: Decimal!
  industry: Industry
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type ShareEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Share
}

type Industry {
  id: Int!
  name: String
}

"The built-in `Decimal` scalar type."
scalar Decimal