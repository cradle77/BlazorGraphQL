@page "/fetchdatafilter"
@inject ISharesClient SharesClient
@implements IDisposable

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<p>
    Select industry:
    <select @onchange="@LoadDataAsync">
        @if (_industries == null)
        {
            <option>... loading ...</option>
        }
        else
        {
            <option value="0">(all)</option>
            @foreach (var industry in _industries)
            {
                <option value="@industry.Id">@industry.Name</option>
            }
        }
    </select>
</p>

@if (_shares == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>CompanyName</th>
                <th>Industry</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var share in _shares)
            {
                <ShareViewer Share="share" OnClick="ChangeValueAsync" />
            }
        </tbody>
    </table>
}

@code {
    private List<IShare> _shares;
    private ShareFilterInput _filter;
    private IIndustry[] _industries;
    private IDisposable _session;

    protected override async Task OnInitializedAsync()
    {
        var query = await this.SharesClient.GetIndustries.ExecuteAsync();

        _industries = query.Data.Industries.ToArray();

        await this.LoadDataAsync(new ChangeEventArgs() { Value = 0 });
        var squery = await this.SharesClient.GetShares.ExecuteAsync(first: null, last: null, where: null);

        _shares = squery.Data.Shares.Nodes.Cast<IShare>().ToList();
    }

    private void ReplaceShareById(IShare share)
    {
        var original = _shares.SingleOrDefault(x => x.Id == share.Id);

        if (original != null)
        {
            var index = _shares.IndexOf(original);

            _shares[index] = (IShare)share;

            this.StateHasChanged();
        }
    }

    private async Task LoadDataAsync(ChangeEventArgs e)
    {
        var selectedValue = int.Parse(e.Value.ToString());

        _filter = selectedValue != 0 ? new ShareFilterInput()
        {
            Industry = new IndustryFilterInput()
            {
                Id = new IntOperationFilterInput()
                { 
                    Eq = selectedValue
                }
            }
        } : null;

        var query = await this.SharesClient.GetShares.ExecuteAsync(first: null, last: null, where: _filter);

        _shares = query.Data.Shares.Nodes.Cast<IShare>().ToList();

        if (_session != null)
        {
            _session.Dispose();
        }

        var industryName = _industries.SingleOrDefault(i => i.Id == selectedValue)?.Name;

        if (string.IsNullOrEmpty(industryName))
        {
            _session = this.SharesClient
                .OnShareValueChanged
                .Watch()
                .Subscribe(x => this.ReplaceShareById(x.Data.OnShareValueChanged));
        }
        else
        {
            _session = this.SharesClient
                .OnShareValueChangedByIndustry
                .Watch(industryName)
                .Subscribe(x => this.ReplaceShareById(x.Data.OnShareValueChangedByIndustry));
        }

        this.StateHasChanged();
    }

    private Random random = new Random();

    private async Task ChangeValueAsync(IShare share)
    {
        var command = await this.SharesClient.ChangeValue.ExecuteAsync(share.Id, random.Next(-20, +20));
    }

    public void Dispose()
    {
        if (_session != null)
        {
            _session.Dispose();
        }
    }
}
